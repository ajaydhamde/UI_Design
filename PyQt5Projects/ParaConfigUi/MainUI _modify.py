# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ParaConfigUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sql
import sqlite3
import json
from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
#list of dictionary structure for data handling.
#Save data to sql database and update ui
listdict = []
# Connect to the SQLite database
connection = sqlite3.connect('ParaConfig.db')
cursor = connection.cursor()

# Execute a query to retrieve data
cursor.execute('SELECT * FROM DEM_DTC')
data = cursor.fetchall()
# Close the database connection when done
connection.close()
#dataModel for whole page selection
class MyTableModel(QtCore.QAbstractTableModel):
    def __init__(self, data, parent=None):
        super(MyTableModel, self).__init__(parent)
        self._data = data[:100]  # Load initial subset of data

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self._data)

    def columnCount(self, parent=QtCore.QModelIndex()):
        return len(self._data[0]) if self._data else 0

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if not index.isValid() or not (0 <= index.row() < self.rowCount()):
            return QtCore.QVariant()

        if role == QtCore.Qt.DisplayRole:
            return self._data[index.row()][index.column()]
    def load_data_from_database(count):
        connection = sqlite3.connect('ParaConfig.db')
        cursor = connection.cursor()
        cursor.execute(f'SELECT * FROM DEM_DTC LIMIT {count}')
        additional_data = cursor.fetchall()
        connection.close()
        return additional_data

    def load_more_data(self, count):
        # Load additional data dynamically
        additional_data = load_data_from_database(count)
        self.beginInsertRows(QtCore.QModelIndex(), len(self._data), len(self._data) + count - 1)
        self._data.extend(additional_data)
        self.endInsertRows()
    def next_page(self):
        if (self._current_page + 1) * self._items_per_page < len(self._data):
            self.beginResetModel()
            self._current_page += 1
            self.endResetModel()

    def previous_page(self):
        if self._current_page > 0:
            self.beginResetModel()
            self._current_page -= 1
            self.endResetModel()
# Usage
model = MyTableModel(data)
# table_view = QtWidgets.QTableView()
# table_view.setModel(model)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.treeWidget = QtWidgets.QTreeWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget.sizePolicy().hasHeightForWidth())
        self.treeWidget.setSizePolicy(sizePolicy)
        self.treeWidget.setMaximumSize(QtCore.QSize(300, 16777215))
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.headerItem().setText(0, "1")
        self.gridLayout.addWidget(self.treeWidget, 0, 0, 1, 2)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tabCanTP = QtWidgets.QWidget()
        self.tabCanTP.setObjectName("tabCanTP")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tabCanTP)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tableWidgetCanTP = QtWidgets.QTableWidget(self.tabCanTP)
        self.tableWidgetCanTP.setAlternatingRowColors(True)
        self.tableWidgetCanTP.setObjectName("tableWidgetCanTP")
        self.tableWidgetCanTP.setColumnCount(3)
        self.tableWidgetCanTP.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCanTP.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCanTP.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCanTP.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCanTP.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCanTP.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetCanTP.setHorizontalHeaderItem(2, item)
        self.tableWidgetCanTP.horizontalHeader().setStretchLastSection(True)
        self.tableWidgetCanTP.verticalHeader().setCascadingSectionResizes(False)
        self.gridLayout_2.addWidget(self.tableWidgetCanTP, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tabCanTP, "")
        self.tabDCM = QtWidgets.QWidget()
        self.tabDCM.setObjectName("tabDCM")
        self.formLayout_2 = QtWidgets.QFormLayout(self.tabDCM)
        self.formLayout_2.setObjectName("formLayout_2")
        self.tableWidgetDCM = QtWidgets.QTableWidget(self.tabDCM)
        self.tableWidgetDCM.setAlternatingRowColors(True)
        self.tableWidgetDCM.setObjectName("tableWidgetDCM")
        self.tableWidgetDCM.setColumnCount(3)
        self.tableWidgetDCM.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetDCM.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetDCM.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetDCM.setHorizontalHeaderItem(2, item)
        self.tableWidgetDCM.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidgetDCM.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidgetDCM.horizontalHeader().setStretchLastSection(True)
        self.tableWidgetDCM.verticalHeader().setCascadingSectionResizes(True)
        self.tableWidgetDCM.verticalHeader().setStretchLastSection(True)
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.SpanningRole, self.tableWidgetDCM)
        self.pushButtonNextService = QtWidgets.QPushButton(self.tabDCM)
        self.pushButtonNextService.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonNextService.setObjectName("pushButtonNextService")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.pushButtonNextService)
        self.pushButtonPrevService = QtWidgets.QPushButton(self.tabDCM)
        self.pushButtonPrevService.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonPrevService.setObjectName("pushButtonPrevService")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.pushButtonPrevService)
        self.tabWidget.addTab(self.tabDCM, "")
        self.tabDEM = QtWidgets.QWidget()
        self.tabDEM.setObjectName("tabDEM")
        self.formLayout = QtWidgets.QFormLayout(self.tabDEM)
        self.formLayout.setObjectName("formLayout")
        self.tableWidgetDEM = QtWidgets.QTableWidget(self.tabDEM)
        self.tableWidgetDEM.setAlternatingRowColors(True)
        self.tableWidgetDEM.setObjectName("tableWidgetDEM")
        self.tableWidgetDEM.setColumnCount(3)
        self.tableWidgetDEM.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetDEM.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetDEM.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidgetDEM.setHorizontalHeaderItem(2, item)
        self.tableWidgetDEM.horizontalHeader().setCascadingSectionResizes(True)
        self.tableWidgetDEM.horizontalHeader().setStretchLastSection(True)
        self.tableWidgetDEM.verticalHeader().setCascadingSectionResizes(True)
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.SpanningRole, self.tableWidgetDEM)
        self.pushButtonNextDTC = QtWidgets.QPushButton(self.tabDEM)
        self.pushButtonNextDTC.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonNextDTC.setObjectName("pushButtonNextDTC")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.pushButtonNextDTC)
        self.pushButtonPreviousDTC = QtWidgets.QPushButton(self.tabDEM)
        self.pushButtonPreviousDTC.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonPreviousDTC.setObjectName("pushButtonPreviousDTC")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.pushButtonPreviousDTC)
        self.tabWidget.addTab(self.tabDEM, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 2, 1, 1)
        self.pushButtonSave = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonSave.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonSave.setObjectName("pushButtonSave")
        self.gridLayout.addWidget(self.pushButtonSave, 1, 0, 1, 1)
        self.pushButtonLoad = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonLoad.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonLoad.setObjectName("pushButtonLoad")
        self.gridLayout.addWidget(self.pushButtonLoad, 1, 1, 1, 1)
        self.pushButtonGenerate = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonGenerate.setMaximumSize(QtCore.QSize(80, 16777215))
        self.pushButtonGenerate.setObjectName("pushButtonGenerate")
        self.gridLayout.addWidget(self.pushButtonGenerate, 1, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuOption = QtWidgets.QMenu(self.menubar)
        self.menuOption.setObjectName("menuOption")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionEnable = QtWidgets.QAction(MainWindow)
        self.actionEnable.setObjectName("actionEnable")
        self.actionDisable = QtWidgets.QAction(MainWindow)
        self.actionDisable.setObjectName("actionDisable")
        self.menuMenu.addAction(self.actionNew)
        self.menuMenu.addAction(self.actionOpen)
        self.menuMenu.addAction(self.actionSave)
        self.menuMenu.addAction(self.actionSave_As)
        self.menuMenu.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionEnable)
        self.menuEdit.addAction(self.actionDisable)
        self.menubar.addAction(self.menuMenu.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuOption.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tableWidgetCanTP.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.tableWidgetCanTP.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "2"))
        item = self.tableWidgetCanTP.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "3"))
        item = self.tableWidgetCanTP.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "id"))
        item = self.tableWidgetCanTP.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Parameter"))
        item = self.tableWidgetCanTP.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Value"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabCanTP), _translate("MainWindow", "Tab CanTP"))
        item = self.tableWidgetDCM.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "id"))
        item = self.tableWidgetDCM.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Parameter"))
        item = self.tableWidgetDCM.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Value"))
        self.pushButtonNextService.setText(_translate("MainWindow", "Next"))
        self.pushButtonPrevService.setText(_translate("MainWindow", "Prev"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabDCM), _translate("MainWindow", "DCM"))
        item = self.tableWidgetDEM.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "New Column"))
        item = self.tableWidgetDEM.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Parameter"))
        item = self.tableWidgetDEM.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Value"))
        self.pushButtonNextDTC.setText(_translate("MainWindow", "Next"))
        self.pushButtonPreviousDTC.setText(_translate("MainWindow", "Prev"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabDEM), _translate("MainWindow", "DEM"))
        self.pushButtonSave.setText(_translate("MainWindow", "Save"))
        self.pushButtonLoad.setText(_translate("MainWindow", "Load"))
        self.pushButtonGenerate.setText(_translate("MainWindow", "Generate"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuOption.setTitle(_translate("MainWindow", "Option"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionEnable.setText(_translate("MainWindow", "Enable"))
        self.actionDisable.setText(_translate("MainWindow", "Disable"))

        # self.Perform_Events()

############################ call function in MainWindow #############################
    
    def insertMultipleRecords(self,recordList):
            try:
                sqliteConnection = sqlite3.connect('ParaConfig.db')
                cursor = sqliteConnection.cursor()
                print("Connected to SQLite")
                #insert dict data to database
                for x in recordList:
                    cursor.execute("INSERT INTO DEM_DTC('id','Paramter','Value') VALUES (:id,:Paramter,:Value)",x)
                
                # sqlite_insert_query = """INSERT INTO DEM_DTC
                #                   ('id', 'Paramter', 'Value') 
                #                   VALUES (?, ?, ?);"""
                # cursor.executemany(sqlite_insert_query, tuple_list)
                sqliteConnection.commit()
                print("Total", cursor.rowcount, "Records inserted successfully into SqliteDb_developers table")
                sqliteConnection.commit()
                cursor.close()

            except sqlite3.Error as error:
                print("Failed to insert multiple records into sqlite table", error)
            finally:
                if sqliteConnection:
                    sqliteConnection.close()
                    print("The SQLite connection is closed")
    #Save data to sql database
    def Save_Event(self):
        temp_dict = {'id':"",'Paramter':"",'Value':""}
        for x in range(0,10):
            temp_dict['id'] = x
            temp_dict['Paramter'] = str("Para_" + str(x))
            temp_dict['Value'] = str(x)
            print(temp_dict)           
            listdict.append(dict(temp_dict))
            # print(temp_dict)
        print("Listdict:")
        print(listdict)
        self.insertMultipleRecords(listdict)
        ##############################
        # import sqlite3

        # try:
        #     sqliteConnection = sqlite3.connect('ParaConfig.db')
        #     cursor = sqliteConnection.cursor()
        #     print("Successfully Connected to SQLite")

        #     sqlite_insert_query = """INSERT INTO DEM_DTC('id', 'Paramter', 'Value') 
        #                            VALUES 
        #                           (4,'James','0x123')"""

        #     count = cursor.execute(sqlite_insert_query)
        #     sqliteConnection.commit()
        #     print("Record inserted successfully into SqliteDb_developers table ", cursor.rowcount)
        #     cursor.close()

        # except sqlite3.Error as error:
        #     print("Failed to insert data into sqlite table", error)
        # finally:
        #     if sqliteConnection:
        #         sqliteConnection.close()
        #         print("The SQLite connection is closed")

        ###############################
        #Save dummy data to dictionary for sql operation
        return
    

    def readSqliteTable(self):
        try:
            sqliteConnection = sqlite3.connect('ParaConfig.db')
            cursor = sqliteConnection.cursor()
            print("Connected to SQLite")

            sqlite_select_query = """SELECT * from DEM_DTC"""
            cursor.execute(sqlite_select_query)
            records = cursor.fetchall()
            print("Total rows are:  ", len(records))
            print("Printing each row")
            print(records)
            cursor.close()

        except sqlite3.Error as error:
            print("Failed to read data from sqlite table", error)
        finally:
            if sqliteConnection:
                sqliteConnection.close()
                print("The SQLite connection is closed")


    #Load last data from json file
    def Load_Event(self):
        #read json data from json file
        # with open('sample.json', 'r') as openfile:
            # Reading from json file
            # json_data = json.load(openfile)
        self.readSqliteTable()
            #update json data to database and update widgettable
        return
    #Generate JSON file with all parameter configuration
    def Generate_Event(self):
        with open("dem.json", "w") as outfile:
            json.dump(dictionary, outfile)  #dump dictionary data to the json file
        return 
            #Perform all cliked events
    def Perform_Events(self):
        #connect all events with widget configuraton
        self.pushButtonNextDTC.clicked.connect(model.next_page)
        self.pushButtonPreviousDTC.clicked.connect(model.previous_page)
        self.pushButtonSave.clicked.connect(self.Save_Event)
        self.pushButtonLoad.clicked.connect(self.Load_Event)
        return


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.Perform_Events()
    MainWindow.show()
    sys.exit(app.exec_())
